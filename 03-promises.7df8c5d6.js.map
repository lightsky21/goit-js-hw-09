{"version":3,"sources":["js/03-promises.js"],"names":["buttonEl","document","querySelector","formEl","amountInputEl","stepInputEl","delayInputEl","onFormElSubmit","e","preventDefault","CreateChainOfPromises","amount","JSON","parse","value","step","delay","totalDelay","index","createPromise","then","position","console","log","catch","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","addEventListener"],"mappings":";AAAA,MAAMA,EAAWC,SAASC,cAAc,UAClCC,EAASF,SAASC,cAAc,QAChCE,EAAgBH,SAASC,cAAc,wBACvCG,EAAcJ,SAASC,cAAc,sBACrCI,EAAeL,SAASC,cAAc,uBAU5C,SAASK,EAAeC,GACtBA,EAAEC,iBAQFC,EANmB,CACjBC,OAAQC,KAAKC,MAAMT,EAAcU,OACjCC,KAAMH,KAAKC,MAAMR,EAAYS,OAC7BE,MAAOJ,KAAKC,MAAMP,EAAaQ,SASnC,SAASJ,GAAsB,OAACC,EAAD,KAASI,EAAT,MAAeC,IACxCC,IAAAA,EAAaD,EACZ,IAAA,IAAIE,EAAQ,EAAGA,GAASP,EAAQO,GAAS,EAC9CC,EAAcD,EAAOD,GACpBG,KAAK,EAAGC,SAAAA,EAAUL,MAAAA,MACjBM,QAAQC,2BAA2BF,QAAeL,SAEnDQ,MAAM,EAAGH,SAAAA,EAAUL,MAAAA,MAClBM,QAAQC,0BAA0BF,QAAeL,SAEjDC,GAAcF,EAKlB,SAASI,EAAcE,EAAUL,GACzBS,MAAAA,EAAgBC,KAAKC,SAAW,GAC/B,OAAA,IAAIC,QAAQ,CAACC,EAASC,KAC3BC,WAAW,KACLN,EACFI,EAAQ,CAAER,SAAUA,EAAUL,MAAOA,IAErCc,EAAO,CAAET,SAAUA,EAAUL,MAAOA,KAErCA,KA1CPb,EAAO6B,iBAAiB,SAAUzB","file":"03-promises.7df8c5d6.js","sourceRoot":"../src","sourcesContent":["const buttonEl = document.querySelector('button');\nconst formEl = document.querySelector('form');\nconst amountInputEl = document.querySelector('input[name=\"amount\"]');\nconst stepInputEl = document.querySelector('input[name=\"step\"]');\nconst delayInputEl = document.querySelector('input[name=\"delay\"]');\n\n\n// for (let index = 0; index < array.length; index++) {\n//   const element = array[index];\n\n// }\nformEl.addEventListener('submit', onFormElSubmit)\n\n\nfunction onFormElSubmit(e) {\n  e.preventDefault();\n \n  const formElData = {\n    amount: JSON.parse(amountInputEl.value),\n    step: JSON.parse(stepInputEl.value),\n    delay: JSON.parse(delayInputEl.value),\n  }\n  \n  CreateChainOfPromises(formElData);\n  \n}\n\n\n\nfunction CreateChainOfPromises({amount, step, delay}) {\n  let totalDelay = delay;\n  for (let index = 1; index <= amount; index += 1) {\n  createPromise(index, totalDelay)\n  .then(({ position, delay }) => {\n    console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n  })\n  .catch(({ position, delay }) => {\n    console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n  });\n    totalDelay += step;\n}\n}\n\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position: position, delay: delay });\n      } else {\n        reject({ position: position, delay: delay });\n      }\n    }, delay);\n  });\n  \n}"]}